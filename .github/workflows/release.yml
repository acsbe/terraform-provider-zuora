name: Release Terraform Provider

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Determine next patch version
        id: version
        run: |
          git fetch --tags --force
          LAST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$LAST_TAG" ]]; then
            NEW_VERSION="v0.0.1"
          elif [[ "$LAST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          else
            echo "Error: invalid tag format: $LAST_TAG"
            exit 1
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $VERSION
          git push origin $VERSION

      - name: Release using HashiCorp Action
        uses: hashicorp/ghaction-terraform-provider-release@v4
        with:
          provider_name: zuora
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ""
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          VERSION: ${{ env.VERSION }}
